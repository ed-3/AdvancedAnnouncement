plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = 'me.ed333.mcplugin.advancedann'
version = '1.3.0-release'

subprojects {
    apply {
        plugin('java')
        plugin('com.github.johnrengelman.shadow')
    }

    jar {
        setBuildDir(file("$rootDir/build/$project.name/"))
        getDestinationDirectory().set(file("$rootDir/build/jar"))
    }

    shadowJar {
        archiveBaseName = "AdvancedAnnouncement-$project.name-$rootProject.version-build$buildVer"
        minimize()
        getDestinationDirectory().set(file("$rootDir/build"))
    }

    def targetJavaVersion = 8
    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    processResources {
        def props = [version: "$rootProject.version-build$buildVer"]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching(['bungee.yml', 'plugin.yml']) {
            expand props
        }
    }

    tasks.withType(JavaCompile).configureEach {
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release = targetJavaVersion
        }
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
    }
}

tasks.register("shadePlugin") {
    dependsOn ':cleanDir', 'Bukkit:shadowJar', 'Bungee:shadowJar', ':addBuildVer'
}

tasks.register("cleanDir") {
    file("$rootDir/build").deleteDir()
}

tasks.register("addBuildVer") {
    addBuildVer()
}

def getBuildVer() {
    def properties = new Properties()
    def buildVerFile = file("buildver.properties")
    buildVerFile.withInputStream {
        properties.load(it)
    }
    int buildVer = properties.getProperty("buildVer") as int
    return buildVer
}

def addBuildVer() {
    def properties = new Properties()
    def buildVerFile = file("buildver.properties")
    properties.setProperty("buildVer", String.valueOf(buildVer + 1))
    buildVerFile.withOutputStream {
        properties.store(new OutputStreamWriter(it), null)
    }
}